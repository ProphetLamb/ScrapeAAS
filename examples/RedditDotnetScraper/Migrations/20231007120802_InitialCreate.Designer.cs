// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RedditDotnetScraper.Migrations
{
    [DbContext(typeof(RedditPostSqliteContext))]
    [Migration("20231007120802_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("RedditPostCommentDto", b =>
                {
                    b.Property<string>("CommentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlText")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentCommentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("PostedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CommentUrl");

                    b.HasIndex("PostedById");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RedditTopLevelPostDto", b =>
                {
                    b.Property<string>("PostUrl")
                        .HasColumnType("TEXT");

                    b.Property<long>("Comments")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentsUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("PostedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Upvotes")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostUrl");

                    b.HasIndex("PostedById");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("RedditUserIdDto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RedditPostCommentDto", b =>
                {
                    b.HasOne("RedditUserIdDto", "PostedBy")
                        .WithMany()
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostedBy");
                });

            modelBuilder.Entity("RedditTopLevelPostDto", b =>
                {
                    b.HasOne("RedditUserIdDto", "PostedBy")
                        .WithMany()
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
